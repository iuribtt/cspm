channel int1, int2, int3, int4

-- variavel x = 1, y = 2, z = 0
ENTRADA = {(int1, 1), (int2, 2), (int3, 0)} -- utilizar

SAIDA = {(int3, 0), (int1, 1), (int2, 2)} 

channel c : ENTRADA

teste = ENTRADA == SAIDA

ENTRADA_SEQ = <(int1, 1), (int2, 2), (int3, 0)> -- utilizar

SAIDA_SEQ = <(int3, 0), (int1, 1), (int2, 2)> 

teste2 = ENTRADA_SEQ == SAIDA_SEQ

elem(_, <>) = false
elem(e, <x>^s) = e==x or elem(e,s)

conjunto(a) = a

VARIAVEIS(variaveis, variavel) = 
		[] t : variaveis @ c.t -> STOP
			-- -> VARIAVEIS(variaveis, variavel)

VARIAVEIS_INTER(variaveis, variavel) = 
		||| t : variaveis @ c.t -> STOP
			-- -> VARIAVEIS(variaveis, variavel)

teste3 = VARIAVEIS(ENTRADA, 5)
teste4 = VARIAVEIS_INTER(ENTRADA, 5)

assert teste3 :[deadlock free[F] ]

-- encontra um determinada variavel na lista
findVariavel(var, entrada_seq) =

	if(getVariavel(head(entrada_seq)) == var) then
		head(entrada_seq)
	else
		findVariavel(var, getSemHead(entrada_seq))

teste5 = findVariavel(int2 ,ENTRADA_SEQ)

--remove um determinada variavel pelo nomeda lista
removerVariavel(varName, entrada_seq) =
	if(length(entrada_seq) > 0) then 
		if(getVariavel(head(entrada_seq)) == varName) then
			getSemHead(entrada_seq)
		else
			<head(entrada_seq)>^removerVariavel(varName, getSemHead(entrada_seq))
	else
		<>

teste6 = removerVariavel(int1 ,ENTRADA_SEQ)

adicionarVariavel(tupla, entrada_seq) = 
			entrada_seq^<tupla>

teste7 = adicionarVariavel((int1,5) ,ENTRADA_SEQ)

-- remove e adiciona a variavel atualizada
teste8 = adicionarVariavel((int1,11), removerVariavel(int1, ENTRADA_SEQ))

getHeadList(<r>^t) = <r>
getHead(<>) = <>
getHead(<r>) = r
getHead(<r>^t) = r
-- getSemLast(t^<l>) = t
getSemLast(<>) = <>
getSemLast(<r>) = <>
getSemLast(<r>^t^<l>) = <r>^t
getLast(<r>^t^<l>) = l

getSemHead(<>) = <>
getSemHead(<r>) = <>
getSemHead(<r>^t) = t


{- Obter valores da tupla -}
getVariavel((variavel, valor)) = variavel
-- uso: getValor(findVariavelValor(ENTRADA_TESTE, 1, 0))
getValor((variavel, valor)) = valor

findVariavelValor_(<tupla>^r, posicao, incremento) =
		if(posicao == incremento) then
			tupla
		else
			findVariavelValor_(r, posicao, incremento + 1)

findVariavelValor(entrada, posicao) =
	findVariavelValor_(entrada, posicao, 0)

-- uso: test_findVariavelValor
test_findVariavelValor = findVariavelValor(ENTRADA_SEQ, 1) 