-------------------------------------------------------
-- Universidade Federal de Pernambuco
-- 	Course: Specification of competing and distributed systems
-- 	Title: Program Synthesizer
-- 	Instructor: Alexandre Cabral Mota
-- 	Student : Iúri Batista Teles
--	Date: 2019-07-24
--	Author: Iúri Batista Teles
--
-------------------------------------------------------

-- The project consist in find a program which satisfy the input and output 
-- It combines all sum, subtraction, division, 
-- and multiplication among INPUT_USER tuple and try to find a counterexample which go to channel:
-- PROGRAM_FOUND or PROGRAM_NOT_FOUND 

datatype var = int1 | int2 | int3

datatype Tmemory_variable_value = memory.var.Int.Tmemory_variable_value| end_memoria

datatype Ttype_operations = addition | subtraction | multiplication | division

datatype Toperation = equal.var.Toperation | add.var.Int.Toperation | sub.var.Int.Toperation 
						| mult.var.Int.Toperation | div.var.Int.Toperation | semicolon 



channel memory_variables_values: Tmemory_variable_value

channel PROGRAM_FOUND, PROGRAM_NOT_FOUND

channel operation: Toperation

-- Variable input
INPUT_USER = {(int1, 15), (int2, 2), (int3, 0)}

-- Expect output
OUTPUT_USER = {(int1, 15), (int2, 2), (int3, 47)} 

-- Max search deep
DEEP = 4


elem(_, <>) = false
elem(e, <x>^s) = e==x or elem(e,s)

-- encontra um determinada variable na lista
findvariable(v, input_sequence) =
	if(getvariable(head(input_sequence)) == v) then
		head(input_sequence)
	else
		findvariable(v, getWithoutHead(input_sequence))

--remove um determinada variable pelo nome da lista
removeVAriable(varName, input_sequence) =
	if(length(input_sequence) > 0) then 
		if(getvariable(head(input_sequence)) == varName) then
			getWithoutHead(input_sequence)
		else
			<head(input_sequence)>^removeVAriable(varName, getWithoutHead(input_sequence))
	else
		<>

addVariable_test(tupla, input_sequence) = 
			input_sequence^<tupla>

-- gets the first sequence element
getHeadList(<r>^t) = <r>
getHead(<>) = <>
getHead(<r>) = r
getHead(<r>^t) = r

-- removes the sequence last element
getWithoutLast(<>) = <>
getWithoutLast(<r>) = <>
getWithoutLast(<r>^t^<l>) = <r>^t
getLast(<r>^t^<l>) = l

-- removes the sequence head
getWithoutHead(<>) = <>
getWithoutHead(<r>) = <>
getWithoutHead(<r>^t) = t


{- get the tuple first element  i.e: (x,y) return x -}
getvariable((variable, value)) = variable
-- usage: getvalue(findVariableValue(ENTRADAEE, 1, 0))

{- get the tuple second element i.e: (x,y) return y -}
getvalue((variable, value)) = value

{- the a element by position in a sequence of tuples <(x,y), (z,w)> -}
findVariableValue(sequence, position) =
	findVariableValue_(sequence, position, 0)

{- use findVariableValue function -}
findVariableValue_(<tupla>^r, position, increment) =
		if(position == increment) then
			tupla
		else
			findVariableValue_(r, position, increment + 1)


{- Sum all element of a sequence -}
SUM(sequence, sum_total) = 
	if(length(sequence) != 0) then
		SUM(getWithoutHead(sequence), sum_total + getvalue(head(sequence)) )
	else
		sum_total

{- Subtract all element of a sequence -}
SUB(sequence, subtration_total) = 
	if(length(sequence) != 0) then
		SUB(getWithoutHead(sequence), subtration_total - getvalue(head(sequence)) )
	else
		subtration_total

{- Multiply all element of a sequence -}
MULT(sequence, multiplication_total) = 
	if(length(sequence) != 0) then
		MULT(getWithoutHead(sequence), multiplication_total * getvalue(head(sequence)) )
	else
		multiplication_total

{- Divide all element of a sequence 
- TODO: check the rules when it is divided by 0, and so on
-}
DIV(sequence, division_total) = 
	if(length(sequence) != 0) then
		if (division_total == 1) then
			DIV(getWithoutHead(sequence), getvalue(head(sequence)) )
		else
			if (getvalue(head(sequence)) != 0) then --evita division por 0
				DIV(getWithoutHead(sequence), division_total / getvalue(head(sequence)) )
			else
				DIV(getWithoutHead(sequence), division_total / 1)
	else
		division_total

{- Combine all operations (adition, subtratio, multiplication and division) in a external choice -}
COMBINATION(current_memory, output, deep) = 

	if (current_memory == OUTPUT_USER) then  --achar a output 
		memory_variables_values.exposeVariables(seq(current_memory)) -> PROGRAM_FOUND -> STOP
	else if (deep <= 0 ) then
		memory_variables_values.exposeVariables(seq(current_memory)) -> PROGRAM_NOT_FOUND -> STOP
	else
		COMBINATION_ADDITION(current_memory, output, deep)
		-- |~|
		[]
		COMBINATION_SUBTRATION(current_memory, output, deep)
		-- []
		-- COMBINATION_MULTIPLICATION(current_memory, output, deep)
		-- []
		-- COMBINATION_DIVISION(current_memory, output, deep)

-- put above
exposeVariables(<v>) =
 					memory.getvariable(v).getvalue(v).end_memoria

{- Show the channel with memory (sequence of tuples) variables and values -}
exposeVariables(current_memory) =
			memory.getvariable(head(current_memory)).getvalue(head(current_memory)).exposeVariables(getWithoutHead(current_memory))



{- Create the channel with the desidered operation -}
funcOperation(<v>, operator) = 
			if (operator == addition) then
				add.getvariable(v).getvalue(v).semicolon
			else if (operator == subtraction) then
				sub.getvariable(v).getvalue(v).semicolon
			else if (operator == multiplication) then
				mult.getvariable(v).getvalue(v).semicolon
			else
				div.getvariable(v).getvalue(v).semicolon

{- Create the channel with the desidered operation -}
funcOperation(combination, operator) = 
			if (operator == addition) then
				add.getvariable(head(combination)).getvalue(head(combination)).funcOperation(getWithoutHead(combination), operator)
			else if (operator == subtraction) then
				sub.getvariable(head(combination)).getvalue(head(combination)).funcOperation(getWithoutHead(combination), operator)
			else if (operator == multiplication) then
				mult.getvariable(head(combination)).getvalue(head(combination)).funcOperation(getWithoutHead(combination), operator)
			else
				div.getvariable(head(combination)).getvalue(head(combination)).funcOperation(getWithoutHead(combination), operator)

{- Combine all sequence values and sum them, and assign to memory variables -}		
COMBINATION_ADDITION(current_memory, output, deep)=
		[] v : current_memory @
					[] elements_combination : diff(Set(current_memory), {{}}) @ 
						operation.equal.getvariable(v).funcOperation(seq(elements_combination), addition) ->
						COMBINATION(UPDATE_MEMORY(seq(current_memory),
						getvariable(v), SUM(seq(elements_combination), 0)), output, deep -1)

{- Combine all sequence values and subtract them, and assign to memory variables -}
COMBINATION_SUBTRATION(current_memory, output, deep)=
		[] v : current_memory @
					[] elements_combination : diff(Set(current_memory), {{}}) @ 
						operation.equal.getvariable(v).funcOperation(seq(elements_combination), subtraction) ->
						COMBINATION(UPDATE_MEMORY(seq(current_memory),
						getvariable(v), SUB(seq(elements_combination), 0)), output, deep -1)

{- Combine all sequence values and multiply them, and assign to memory variables -}
COMBINATION_MULTIPLICATION(current_memory, output, deep)=
		[] v : current_memory @
					[] elements_combination : diff(Set(current_memory), {{}}) @ 
						operation.equal.getvariable(v).funcOperation(seq(elements_combination), multiplication) ->
						COMBINATION(UPDATE_MEMORY(seq(current_memory),
						getvariable(v), MULT(seq(elements_combination), 1)), output, deep -1)

{- Combine all sequence values and divide them, and assign to memory variables -}		
COMBINATION_DIVISION(current_memory, output, deep)=
		[] v : current_memory @
					[] elements_combination : diff(Set(current_memory), {{}}) @ 
						operation.equal.getvariable(v).funcOperation(seq(elements_combination), division) ->
						COMBINATION(UPDATE_MEMORY(seq(current_memory),
						getvariable(v), DIV(seq(elements_combination), 1)), output, deep -1)

set_elements_test = diff(Set(INPUT_USER), {{}}) 

{- update the memory value -}
UPDATE_MEMORY(current_memory, varName, value) =
	set(removeVAriable(varName, current_memory)^<(varName, value)>)

{-EXECUTE THE PROGRAMA-}
EXECUTE = COMBINATION(INPUT_USER, OUTPUT_USER, DEEP)

{- FIND A COUNTEREXAMPLE AND CHECK IF FOUND THE PROGRAM OR NOT -}
assert EXECUTE :[deadlock free[F] ]

-- Checks if the EXECUTE is divergence free
assert EXECUTE :[divergence free]
-- Checks if the EXECUTE is determnistc
assert EXECUTE :[deterministic]

-- EXECUTE [] DIV =FD DIV
-- CHAOS [T= EXECUTE
-- CHAOS [F= EXECUTE