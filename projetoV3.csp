{- 

Objetivo gerar possiveis programas dando uma entrada e uma saida espedifica especifica

-}

-- baby Steps

--channel x, y, z -- evento 
include "projeto_funcoes.csp"

channel varx, vary, varz
datatype op = add | sub | div | multi

-- datatype exp = expAttrBool.var.Bool | expAttrInt.var.Int | expSoma.var.Int.op.Int

-- datatype expressao = expressaoAttrB.var.Bool | atribuicao.var.Int
-- datatype texpB = texptB.var.Bool
-- datatype texpA = texptA.var.Int

-- datatype TPrograma = skip | Atribuicao.var.texpA.programa | IF.texpB.programa

-- datatype Soma = equal.var.Int.op.var.Int | somaLoop.Soma

-- datatype TPrograma = skip | AtribuicaoInt.var.Int | AtribuicaoSoma.var.Soma

-- channel programa: TPrograma

-- flags
channel MaximaProfundidade, OperacaoSoma

-- variavel x = 1, y = 2, z = 0
ENTRADA = <(varx, 1), (vary, 2), (varz, 0)> --create a sequence with
-- variavel x = 1, y = 2, z = 3 equivale a uma soma z = x + y
SAIDA = <(varx, 1), (vary, 2), (varz, 5)>

MEMORIA = ENTRADA

test_M = MEMORIA == SAIDA -- verificar se sao iguais




-- uso: prog(<(x, 1), (y, 2), (z, 3)>, <(x, 1), (y, 2), (z, 3)>, 2)
prog(entrada, memoria, saida, deep) = 
		if(deep == 0) then
			MaximaProfundidade -> STOP
		else if (memoria == SAIDA) then  --achar a saida 
			SKIP
		else (

				-- (
				-- programa.AtribuicaoSoma.getVariavel(findVariavelValor(memoria,2))
				-- .equal
				-- .getVariavel(findVariavelValor(memoria,2)).getValor(findVariavelValor(memoria,2))
				-- .add
				-- .getVariavel(findVariavelValor(memoria,1)).getValor(findVariavelValor(memoria,1)) 

				-- ->	
				prog(entrada, <(varx, 1), (vary, 2), 
					(varz, getValor(findVariavelValor(memoria,2)) + 
						getValor(findVariavelValor(memoria,1)))>
					, saida, deep-1)
				-- )
			)

-- uso: EXEC
EXEC = prog(ENTRADA, ENTRADA, SAIDA, 3)