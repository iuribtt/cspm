{- 

Objetivo gerar possiveis programas dando uma entrada e uma saida espedifica especifica

-}

-- baby Steps

--channel x, y, z -- evento 

datatype var =  x | y | z
datatype op = add | sub | div | multi

datatype exp = expAttrBool.var.Bool | expAttrInt.var.Int | expSoma.var.Int.op.Int

-- datatype expressao = expressaoAttrB.var.Bool | atribuicao.var.Int
-- datatype texpB = texptB.var.Bool
-- datatype texpA = texptA.var.Int

-- datatype TPrograma = skip | Atribuicao.var.texpA.programa | IF.texpB.programa

datatype Soma = equal.var.Int.op.var.Int | somaLoop.Soma

datatype TPrograma = skip | AtribuicaoInt.var.Int | AtribuicaoSoma.var.Soma

channel programa: TPrograma

-- flags
channel MaximaProfundidade, OperacaoSoma

-- variavel x = 1, y = 2, z = 0
ENTRADA = <(x, 1), (y, 2), (z, 0)> --create a sequence with
-- variavel x = 1, y = 2, z = 3 equivale a uma soma z = x + y
SAIDA = <(x, 1), (y, 2), (z, 5)>

MEMORIA = ENTRADA

test_M = MEMORIA == SAIDA -- verificar se sao iguais

	{- Obter valores da tupla -}
	getVariavel((variavel, valor)) = variavel
	-- uso: getValor(findVariavelValor(ENTRADA, 1, 0))
	getValor((variavel, valor)) = valor

	findVariavelValor_(<tupla>^r, posicao, incremento) =
			if(posicao == incremento) then
				tupla
			else
				findVariavelValor_(r, posicao, incremento + 1)

	findVariavelValor(entrada, posicao) =
		findVariavelValor_(entrada, posicao, 0)

	-- uso: test_findVariavelValor
	test_findVariavelValor = findVariavelValor(ENTRADA, 1) 

	
	{- -}
	func_soma(entrada, tuplaV0, tuplaV1, tuplaV2) = 

		-- <tuplaV0, tuplaV1, (getVariavel(tuplaV2), getVariavel(tuplaV1) + getVariavel(tuplaV2)>
		OperacaoSoma


-- uso: prog(<(x, 1), (y, 2), (z, 3)>, <(x, 1), (y, 2), (z, 3)>, 2)
prog(entrada, memoria, saida, deep) = 
		if(deep == 0) then
			MaximaProfundidade -> STOP
		else if (memoria == SAIDA) then  --achar a saida 
			SKIP
		else (

			-- pega o valor de x e y e o resultado coloca em Z
			--expSoma.(getVariavel(findVariavelValor(entrada,2,0))).getValor(findVariavelValor(entrada,0,0)).add.findVariavelValor(entrada,1,0)->prog(entrada, saida, deep-1)
			-- valor.varI.getVariavel(findVariavelValor(entrada,2,0))  -> prog(entrada, saida, deep-1)

			--soma
			(
	
				( 
				programa.AtribuicaoSoma.getVariavel(findVariavelValor(memoria,2))
				.equal
				.getVariavel(findVariavelValor(memoria,0)).getValor(findVariavelValor(memoria,0))
				.add
				.getVariavel(findVariavelValor(memoria,1)).getValor(findVariavelValor(memoria,1)) 

				->	
					prog(memoria, <(x, 1), (y, 2), 
					(z, getValor(findVariavelValor(memoria,2)) + getValor(findVariavelValor(memoria,0)) + 
						getValor(findVariavelValor(memoria,1)))>, saida, deep-1)
				)
				[]
				(
				programa.AtribuicaoSoma.getVariavel(findVariavelValor(memoria,2))
				.equal
				.getVariavel(findVariavelValor(memoria,2)).getValor(findVariavelValor(memoria,2))
				.add
				.getVariavel(findVariavelValor(memoria,0)).getValor(findVariavelValor(memoria,0)) 

				->	
				prog(memoria, <(x, 1), (y, 2), 
					(z, getValor(findVariavelValor(memoria,2)) + getValor(findVariavelValor(memoria,0)))>
					, saida, deep-1)
				)
				[]
				(
				programa.AtribuicaoSoma.getVariavel(findVariavelValor(memoria,2))
				.equal
				.getVariavel(findVariavelValor(memoria,2)).getValor(findVariavelValor(memoria,2))
				.add
				.getVariavel(findVariavelValor(memoria,1)).getValor(findVariavelValor(memoria,1)) 

				->	
				prog(memoria, <(x, 1), (y, 2), 
					(z, getValor(findVariavelValor(memoria,2)) + 
						getValor(findVariavelValor(memoria,1)))>
					, saida, deep-1)
				)
			)

			)

-- uso: exec
exec = prog(ENTRADA, ENTRADA, SAIDA, 3)