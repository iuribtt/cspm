datatype var = int1 | int2 | int3 | int4

channel terminou
channel entrada_channel : ENTRADAE
channel sum : Int
channel combinacao_soma
channel ACHOU, NAO_ACHOU
channel elemento : SAIDAE
channel valores_memoria: var.Int.var.Int.var.Int

-- variavel x = 1, y = 2, z = 0
ENTRADAE = {(int1, 15), (int2, 5), (int3, 0)} -- utilizar

MEMORIAE = {(int1, 3), (int2, 5), (int3, 0)} -- utilizar

SAIDAE = {(int1, 15), (int2, 5), (int3, 3)} 


test1 = ENTRADAE == SAIDAE

ENTRADAE_SEQ = <(int1, 1), (int2, 2), (int3, 0)> -- utilizar

SAIDAE_SEQ = <(int3, 0), (int1, 1), (int2, 2)> 

test2 = ENTRADAE_SEQ == SAIDAE_SEQ

elem(_, <>) = false
elem(e, <x>^s) = e==x or elem(e,s)

conjunto(a) = a

VARIAVEIS(variaveis, variavel) = 
		[] t : variaveis @ entrada_channel.t -> STOP
			-- -> VARIAVEIS(variaveis, variavel)
test3 = VARIAVEIS(ENTRADAE, 5)

VARIAVEIS_INTER(variaveis, variavel) = 
		||| t : variaveis @ entrada_channel.t -> STOP
			-- -> VARIAVEIS(variaveis, variavel)

test4 = VARIAVEIS_INTER(ENTRADAE, 5)

assert test3 :[deadlock free[F] ]
assert test4 :[deadlock free[F] ]

-- encontra um determinada variavel na lista
findVariavel(v, entrada_seq) =

	if(getVariavel(head(entrada_seq)) == v) then
		head(entrada_seq)
	else
		findVariavel(v, getSemHead(entrada_seq))

test5 = findVariavel(int2, ENTRADAE_SEQ)

--remove um determinada variavel pelo nome da lista
removerVariavel(varName, entrada_seq) =
	if(length(entrada_seq) > 0) then 
		if(getVariavel(head(entrada_seq)) == varName) then
			getSemHead(entrada_seq)
		else
			<head(entrada_seq)>^removerVariavel(varName, getSemHead(entrada_seq))
	else
		<>

test6 = removerVariavel(int1 ,ENTRADAE_SEQ)

adicionarVariavel(tupla, entrada_seq) = 
			entrada_seq^<tupla>

test7 = adicionarVariavel((int1,5) ,ENTRADAE_SEQ)

-- remove e adiciona a variavel atualizada
test8 = adicionarVariavel((int1,11), removerVariavel(int1, ENTRADAE_SEQ))

getHeadList(<r>^t) = <r>
getHead(<>) = <>
getHead(<r>) = r
getHead(<r>^t) = r
-- getSemLast(t^<l>) = t
getSemLast(<>) = <>
getSemLast(<r>) = <>
getSemLast(<r>^t^<l>) = <r>^t
getLast(<r>^t^<l>) = l

getSemHead(<>) = <>
getSemHead(<r>) = <>
getSemHead(<r>^t) = t


{- Obter valores da tupla -}
getVariavel((variavel, valor)) = variavel
-- uso: getValor(findVariavelValor(ENTRADAEE, 1, 0))
getValor((variavel, valor)) = valor

findVariavelValor_(<tupla>^r, posicao, incremento) =
		if(posicao == incremento) then
			tupla
		else
			findVariavelValor_(r, posicao, incremento + 1)

findVariavelValor(entrada, posicao) =
	findVariavelValor_(entrada, posicao, 0)

-- uso: test_findVariavelValor
test_findVariavelValor = findVariavelValor(ENTRADAE_SEQ, 1) 


TEST(variaveis, variavel) = 
		[] t : variaveis @ entrada_channel.t -> STOP

COMBINACOES_SOMA(tuplas, soma) = 
-- if(deep >0) then
	[] t : diff(Set(tuplas), {{}})
						@ sum.(soma + SUM(seq(t), 0)) -> COMBINACOES_SOMA(tuplas, soma + SUM(seq(t), 0))
						
-- else
-- 	STOP

SUM(entrada, soma) = 
if(length(entrada) != 0) then
	SUM(getSemHead(entrada), soma + getValor(head(entrada)) )
else
	soma

SUB(entrada, subtracaoTotal) = 
if(length(entrada) != 0) then
	SUB(getSemHead(entrada), subtracaoTotal - getValor(head(entrada)) )
else
	subtracaoTotal

MULT(entrada, multiplicacaoTotal) = 
if(length(entrada) != 0) then
	MULT(getSemHead(entrada), multiplicacaoTotal * getValor(head(entrada)) )
else
	multiplicacaoTotal

DIV(entrada, divisaoTotal) = 
if(length(entrada) != 0) then
	if (divisaoTotal == 1) then
		DIV(getSemHead(entrada), getValor(head(entrada)) )
	else
		if (getValor(head(entrada)) != 0) then --evita divisao por 0
			DIV(getSemHead(entrada), divisaoTotal / getValor(head(entrada)) )
		else
			DIV(getSemHead(entrada), divisaoTotal / 1)
else
	divisaoTotal

COMUTACAO(memoria, saida, deep) = 

	if (memoria == SAIDAE) then  --achar a saida 
		exposeVariaveis(seq(memoria)) -> ACHOU -> STOP
	else if (deep <= 0 ) then
		exposeVariaveis(seq(memoria)) -> NAO_ACHOU -> STOP
	else
		COMUTACAO_SOMA(memoria, saida, deep)
		-- |~|
		[]
		COMUTACAO_SUBTRACAO(memoria, saida, deep)

		[]
		COMUTACAO_MULTPLICACAO(memoria, saida, deep)

		[]
		COMUTACAO_DIVISAO(memoria, saida, deep)

exposeVariaveis(memoria) =
			valores_memoria.getVariavel(findVariavelValor(memoria, 0)).getValor(findVariavelValor(memoria, 0))
			.getVariavel(findVariavelValor(memoria, 1)).getValor(findVariavelValor(memoria, 1))
			.getVariavel(findVariavelValor(memoria, 2)).getValor(findVariavelValor(memoria, 2))

datatype TOperacoes = adicao | subtracao | multiplicacao | divisao

datatype operacao = igualdade.var.operacao | add.var.Int.operacao | sub.var.Int.operacao | mult.var.Int.operacao | div.var.Int.operacao | ponto_virgula 
channel valor_operacao: operacao

funcOperacao(<v>, operador) = 
			if (operador == adicao) then
				add.getVariavel(v).getValor(v).ponto_virgula
			else if (operador == subtracao) then
				sub.getVariavel(v).getValor(v).ponto_virgula
			else if (operador == multiplicacao) then
				mult.getVariavel(v).getValor(v).ponto_virgula
			else
				div.getVariavel(v).getValor(v).ponto_virgula

funcOperacao(combinacoes, operador) = 
			if (operador == adicao) then
				add.getVariavel(head(combinacoes)).getValor(head(combinacoes)).funcOperacao(getSemHead(combinacoes), operador)
			else if (operador == subtracao) then
				sub.getVariavel(head(combinacoes)).getValor(head(combinacoes)).funcOperacao(getSemHead(combinacoes), operador)
			else if (operador == multiplicacao) then
				mult.getVariavel(head(combinacoes)).getValor(head(combinacoes)).funcOperacao(getSemHead(combinacoes), operador)
			else
				div.getVariavel(head(combinacoes)).getValor(head(combinacoes)).funcOperacao(getSemHead(combinacoes), operador)
			
COMUTACAO_SOMA(memoria, saida, deep)=
		[] v : memoria @
					[] elementos_combinacao : diff(Set(memoria), {{}}) @ 
						valor_operacao.igualdade.getVariavel(v).funcOperacao(seq(elementos_combinacao), adicao) ->
						COMUTACAO(ATUALIZAR_MEMORIAE(seq(memoria),
						getVariavel(v), SUM(seq(elementos_combinacao), 0)), saida, deep -1)

COMUTACAO_SUBTRACAO(memoria, saida, deep)=
		[] v : memoria @
					[] elementos_combinacao : diff(Set(memoria), {{}}) @ 
						valor_operacao.igualdade.getVariavel(v).funcOperacao(seq(elementos_combinacao), subtracao) ->
						COMUTACAO(ATUALIZAR_MEMORIAE(seq(memoria),
						getVariavel(v), SUB(seq(elementos_combinacao), 0)), saida, deep -1)

COMUTACAO_MULTPLICACAO(memoria, saida, deep)=
		[] v : memoria @
					[] elementos_combinacao : diff(Set(memoria), {{}}) @ 
						valor_operacao.igualdade.getVariavel(v).funcOperacao(seq(elementos_combinacao), multiplicacao) ->
						COMUTACAO(ATUALIZAR_MEMORIAE(seq(memoria),
						getVariavel(v), MULT(seq(elementos_combinacao), 1)), saida, deep -1)

COMUTACAO_DIVISAO(memoria, saida, deep)=
		[] v : memoria @
					[] elementos_combinacao : diff(Set(memoria), {{}}) @ 
						valor_operacao.igualdade.getVariavel(v).funcOperacao(seq(elementos_combinacao), divisao) ->
						COMUTACAO(ATUALIZAR_MEMORIAE(seq(memoria),
						getVariavel(v), DIV(seq(elementos_combinacao), 1)), saida, deep -1)

COMUTACAO2(variaveis, memoria) = 
	if (memoria == SAIDAE) then  --achar a saida 
		SKIP
	else
		[] l : variaveis @ 
					[] elementos_combinacao : diff(Set(variaveis), {{}})
						@ getVariavel(l) -> sum.getValor(l) -> sum.SUM(seq(elementos_combinacao), 0) -> COMUTACAO2(variaveis, memoria)

test9 = COMUTACAO(ENTRADAE, SAIDAE, 3) --TEST
assert test9 :[deadlock free[F] ]

conjuntos_elementos = diff(Set(ENTRADAE), {{}}) 
test10 = head(seq(conjuntos_elementos))
test11 = SUM(seq(test10), 0)
test12 = COMBINACOES_SOMA(ENTRADAE, 0)

ATUALIZAR_MEMORIAE(memoria, varName, valor) =
	set(removerVariavel(varName, memoria)^<(varName, valor)>)

test13 = removerVariavel(int1, ENTRADAE_SEQ)

test14 = findVariavel(int2 ,ENTRADAE_SEQ)

-- test15 = ATUALIZAR_MEMORIAE(ENTRADAE, 0, 88)

test15 = ATUALIZAR_MEMORIAE(seq(MEMORIAE), int3, 5)

test16 = if ATUALIZAR_MEMORIAE(seq(MEMORIAE), int3, 5) == SAIDAE then True else False

test18 = if ENTRADAE == SAIDAE then True else False



--ATUALIZAR_MEMORIAE(ENTRADAE_SEQ, getVariavel(l), SUM(seq(elementos_combinacao), 0))

EXECUTAR = COMUTACAO(ENTRADAE, SAIDAE, 3)
assert EXECUTAR :[deadlock free[F] ]